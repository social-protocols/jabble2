<%@ val schema: dbcodegen.DataSchema %>

package backend.db

import com.augustnagro.magnum.*
import com.augustnagro.magnum.Spec as MSpec

#for (table <- schema.tables)

@Table(SqliteDbType)
@SqlName("${table.name}")
case class ${table.scalaName}(
  #for (column <- table.columns)
  #if (column.db.isPartOfPrimaryKey)
  @Id
  #end
  @SqlName("${column.name}")
  ${column.scalaName}: ${column.scalaType},
  #end
) derives DbCodec

object ${table.scalaName} {
  #{ val primaryKeyColumns = table.columns.filter(_.db.isPartOfPrimaryKey)}#
  type Id = ${if (primaryKeyColumns.isEmpty) "Null" else primaryKeyColumns.map(_.scalaType).mkString("(", ", ", ")")}

  #if (table.isView)
  val Table = TableInfo[${table.scalaName}, ${table.scalaName}, ${table.scalaName}.Id]
  #else
  case class Creator(
    #for (column <- table.columns if !column.db.isGenerated && !column.db.hasDefaultValue && !column.db.isAutoIncremented && !(column.db.isPartOfPrimaryKey && column.scalaType == "Int"))
    ${column.scalaName}: ${column.scalaType},
    #end
  )
  val Table = TableInfo[${table.scalaName}.Creator, ${table.scalaName}, ${table.scalaName}.Id]
  #end
  val Spec = MSpec[${table.scalaName}]
}

#if (table.isView)
object ${table.scalaName}Repo extends ImmutableRepo[${table.scalaName}, ${table.scalaName}.Id] {
#else
object ${table.scalaName}Repo extends Repo[${table.scalaName}.Creator, ${table.scalaName}, ${table.scalaName}.Id] {
#end
    #{
    val indexPrefixes = table.indices.flatMap(index => index.columns.inits.filter(_.nonEmpty).map(prefix => (prefix, Option.when(prefix.size == index.columns.size)(index)))).sortBy(!_._2.exists(_.db.isUnique)).distinctBy(_._1)
    }#

    #for ((indexPrefix,indexOpt) <- indexPrefixes)
    def findByIndexOn${indexPrefix.map(_.scalaName.stripPrefix("`").stripSuffix("`").capitalize).mkString}(
      #for (column <- indexPrefix)
      ${column.scalaName}: ${column.scalaType},
      #end
    )(using DbCon): ${if (indexOpt.exists(_.db.isUnique)) "Option" else "Vector"}[${table.scalaName}] = {
        val spec = Spec[${table.scalaName}]
          #for (column <- indexPrefix)
          .where(sql"${column.name} = $${column.scalaName}")
          #end
        findAll(spec)${if (indexOpt.exists(_.db.isUnique)) ".headOption" else ""}
    }
    #end
}
#end
