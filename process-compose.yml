is_strict: true
environment:
  - FORCE_COLOR=1

processes:

  npm:
    namespace: init
    command: bun install --color=always

  build:
    namespace: init
    # initial mill build, so that vite finds the js files referenced in main.js
    command: |
      scripts/generate-query-code
      mill --jobs 0 --color true '{backend.compile,frontend.fastLinkJS}'

  vite:
    namespace: service
    command: bunx vite dev --port 12345 --strictPort
    depends_on:
      npm:
        condition: process_completed_successfully
      build:
        # vite should start, even if the initial build failed
        condition: process_completed

  front:
    namespace: watcher
    # frontend has separate mill watch process, because backend changes should not trigger page reloads
    command: mill --jobs 0 --color true --watch frontend.fastLinkJS
    depends_on:
      build:
        # watch should start, even if the initial build failed
        condition: process_completed

  back:
    namespace: service
    # backend has separate mill watch process, because frontend changes should not trigger backend restarts
    command: mill --jobs 0 --color true --watch backend.runBackground
    environment:
      - JDBC_URL=jdbc:sqlite:data/app.db
      - FRONTEND_DISTRIBUTION_PATH=dist # TODO: doesn't make sense for dev
      - LOG_LEVEL=debug
    depends_on:
      build:
        # watch should start, even if the initial build failed
        condition: process_completed

  query:
    namespace: watcher
    command: find queries.sql schema.sql queries_template.go.tmpl sqlc.yml scripts/generate-query-code | entr -npr scripts/generate-query-code

  rpc-re:
    # Workaround after changing sloth rpc api trait.
    # Somehow a change in the rpc trait is not detected by the compiler.
    # We need to clean and rebuild...
    # TODO: isolate and report bug
    command: find rpc | entr -np bash -c 'echo "cleaning rpc... (incremental compilation workaround)"; mill clean "{rpc,frontend,backend}"; touch rpc/src/rpc/RpcApi.scala'

  db:
    namespace: watcher
    command: find schema.sql scripts/dev-db-migration-atlas | entr -n scripts/dev-db-migration-atlas

  auth:
    namespace: service
    command: |
      # https://github.com/keratin/authn-server/tree/main/docs#readme
      docker run --name authn --rm -p 3000:3000 -p 3001:3001 \
        --user $(id -u):$(id -g) \
        -v ./data:/data \
        -e DATABASE_URL="sqlite3://localhost//data/authn.db" \
        -e APP_DOMAINS="localhost" \
        -e AUTHN_URL="http://localhost:3000" \
        -e PORT=3001 \
        -e PUBLIC_PORT=3000 \
        -e SECRET_KEY_BASE="test" \
        -e ENABLE_SIGNUP=false \
        -e HTTP_AUTH_USERNAME="admin" \
        -e HTTP_AUTH_PASSWORD="adminpw" \
        keratin/authn-server:latest \
        sh -c "./authn migrate && ./authn server"

  gbrain:
    namespace: service
    # the image must first be built locally in the GlobalBrain repo using earthly +docker-build
    command: |
      docker run --name global-brain --rm -p 8000:8000 \
        --user $(id -u):$(id -g) \
        -v ./data:/data \
        -e DATABASE_PATH=/data/globalbrain.db \
        global-brain

